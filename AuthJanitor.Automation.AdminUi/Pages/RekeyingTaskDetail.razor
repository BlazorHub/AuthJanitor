@page "/rekeyingTasks/{RekeyingTaskId}"

<Container IsFluid="true" Padding="Padding.Is0">
    <Row Margin="Margin.Is4.FromBottom">
        <Column ColumnSize="ColumnSize.Is8">
            <Card>
                <CardHeader>Rekeying Task Secret Detail</CardHeader>
                <CardBody>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">ID<span class="float-right text-muted">@Secret.ObjectId</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Current Nonce<span class="float-right text-muted">@Secret.Nonce</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Name<span class="float-right text-muted">@Secret.Name</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Providers<span class="float-right text-muted">@Secret.ProviderSummary</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Last Changed<span class="float-right text-muted">@Secret.LastChanged</span></Heading>
                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">Expires<span class="float-right text-muted">@Secret.Expiry</span></Heading>

                    @{
                        Background barColor;
                        if (Secret.ExpiryPercent > 90) barColor = Background.Danger;
                        else if (Secret.ExpiryPercent > 75) barColor = Background.Warning;
                        else barColor = Background.Success;
                    }

                    <Progress Margin="Margin.Is3.FromBottom">
                        <ProgressBar Background="@barColor" Value="@Secret.ExpiryPercent">
                            @if (Secret.IsValid)
                            {
                                @((DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                            }
                            else
                            {
                                @("Expired for " + (DateTimeOffset.Now - Secret.LastChanged).GetValueOrDefault().ToReadableString(true))
                            }
                        </ProgressBar>
                    </Progress>

                    <Heading Size="HeadingSize.Is6" Class="font-weight-bold">
                        Rotation Confirmations
                        <span class="float-right">
                            <ApprovalTypeComponent @bind-Value="@Secret.TaskConfirmationStrategies" />
                        </span>
                    </Heading>
                </CardBody>
            </Card>
        </Column>
        <Column ColumnSize="ColumnSize.Is4">
            <Buttons Orientation="Orientation.Vertical">
                <Blazorise.Button IsDisabled="!Secret.TaskConfirmationStrategies.HasFlag(TaskConfirmationStrategies.AdminCachesSignOff) &&
                                                   !Secret.TaskConfirmationStrategies.HasFlag(TaskConfirmationStrategies.AdminSignsOffJustInTime)"
                                  Color="Color.Primary">Create Rekeying Task</Blazorise.Button>
                <Blazorise.Button Color="Color.Danger">Delete Managed Secret</Blazorise.Button>
            </Buttons>
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            <ResourceListCardAccordion Resources="@Secret.Resources" />
        </Column>
    </Row>
    <Row>
        <Column ColumnSize="ColumnSize.Is12">
            @if (Task.Attempts.Any())
            {
                <Card>
                    <CardHeader>Rekeying Attempts</CardHeader>
                    <CardBody>
                        <Tabs SelectedTabChanged="@OnSelectedTabChanged" SelectedTab="@SelectedAttemptTab">
                            <Items>
                                @foreach (var attempt in Task.Attempts)
                                {
                                <Tab Name="@attempt.AttemptStarted.ToString()">
                                    @if (attempt.IsSuccessfulAttempt && attempt.AttemptFinished != default)
                                    {
                                        <Icon Name="FontAwesomeIcons.CheckCircle" Class="text-success" />
                                    }
                                    else if (attempt.AttemptFinished != default)
                                    {
                                        <Icon Name="FontAwesomeIcons.TimesCircle" Class="text-danger" />
                                    }
                                    else
                                    {
                                        <Icon Name="FontAwesomeIcons.PlayCircle" Class="text-info" />
                                    }
                                    @attempt.UserDisplayName<br />
                                    <small>@attempt.AttemptStarted.ToString()</small>
                                </Tab>
                                }
                            </Items>
                            <Content>
                                @foreach (var attempt in Task.Attempts)
                                {
                                    <TabPanel Name="@attempt.AttemptStarted.ToString()"
                                              Padding="Padding.Is1">
                                        <pre><code>@attempt.LogString</code></pre>
                                        @if (!attempt.IsSuccessfulAttempt)
                                        {
                                            <Alert Color="Color.Info" IsShow="true">
                                                <Heading Size="HeadingSize.Is4" TextColor="TextColor.Danger">
                                                    Exception Thrown!
                                                </Heading>
                                                <Paragraph>
                                                    <pre><code>@attempt.OuterException</code></pre>
                                                </Paragraph>
                                            </Alert>
                                        }
                                    </TabPanel>
                                }
                            </Content>
                        </Tabs>
                    </CardBody>
                </Card>
            }
        </Column>
    </Row>
</Container>

@using AuthJanitor.Automation.Components.Cards
@using AuthJanitor.Automation.Components.Common.Secrets
@using AuthJanitor.Automation.Shared.ViewModels
@using AuthJanitor.Providers
@code {
    public ManagedSecretViewModel Secret => Task == null ? new ManagedSecretViewModel() : Task.ManagedSecret;
    public RekeyingTaskViewModel Task { get; set; } = new RekeyingTaskViewModel();

    [Parameter]
    public string RekeyingTaskId { get; set; }

    public TimeSpan DurationSoFar => DateTimeOffset.UtcNow - Secret.LastChanged.GetValueOrDefault();

    protected override async Task OnInitializedAsync()
    {
        Task = await Http.AJGet<RekeyingTaskViewModel>(Guid.Parse(RekeyingTaskId));
        if (Task.Attempts.Any())
            SelectedAttemptTab = Task.Attempts.OrderByDescending(a => a.AttemptStarted).FirstOrDefault()?.AttemptStarted.ToString();
    }

    string SelectedAttemptTab;
    private void OnSelectedTabChanged(string name)
    {
        SelectedAttemptTab = name;
    }
}